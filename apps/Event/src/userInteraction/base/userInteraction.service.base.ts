/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserInteraction as PrismaUserInteraction,
  Event as PrismaEvent,
} from "@prisma/client";

export class UserInteractionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserInteractionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userInteraction.count(args);
  }

  async userInteractions<T extends Prisma.UserInteractionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInteractionFindManyArgs>
  ): Promise<PrismaUserInteraction[]> {
    return this.prisma.userInteraction.findMany<Prisma.UserInteractionFindManyArgs>(
      args
    );
  }
  async userInteraction<T extends Prisma.UserInteractionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInteractionFindUniqueArgs>
  ): Promise<PrismaUserInteraction | null> {
    return this.prisma.userInteraction.findUnique(args);
  }
  async createUserInteraction<T extends Prisma.UserInteractionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInteractionCreateArgs>
  ): Promise<PrismaUserInteraction> {
    return this.prisma.userInteraction.create<T>(args);
  }
  async updateUserInteraction<T extends Prisma.UserInteractionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInteractionUpdateArgs>
  ): Promise<PrismaUserInteraction> {
    return this.prisma.userInteraction.update<T>(args);
  }
  async deleteUserInteraction<T extends Prisma.UserInteractionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInteractionDeleteArgs>
  ): Promise<PrismaUserInteraction> {
    return this.prisma.userInteraction.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.userInteraction
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }
}
